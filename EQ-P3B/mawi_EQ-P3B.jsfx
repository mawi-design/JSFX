desc:mawi EQ-P3B
/*
version: 1.00
changelog: First release :)
tags: EQ, Filter
author: mawi
copyright (C) 2023 and later mawi
license: GNU AGPLv3 - https://www.gnu.org/licenses/agpl-3.0.html
provides: 
  img/*
  mawi_EQ-P3B_Manual.pdf
about:
  # EQ-P3B
  ---
  ## Vintage passive EQ

  The EQ-P3B is modeled on a legendary passive equalizer developed in the 1950s. It is one of the most appreciated and iconic equalizers in audio production and has had a great influence on the sound design of many music productions. Some functions have been changed to the EQ-P3B to make it even more universally applicable. 

  The highlight at a glance:
  * analog hardware as model
  * simultaneous frequency boosts and cuts
  * vintage flair with rich and harmonically pleasing sound
  * low CPU, 0 latency, optimal for recording
  * no noise, ideal for mixing and mastering
  * attractive GUI, freely scalable
  * fully automatable with sample accurate automation
  * automatic bypass when playback stops 
  * open source code, i.e. modifiable
  * freeware, no annoying activation
  * JSFX is optimally integrated in REAPER

  If you want to **support** my work or buy me a coffee, you can send my a donation via Paypal: mawi01@mail.de
*/

in_pin:EQ-P3B Input 1
in_pin:EQ-P3B Input 2
out_pin:EQ-P3B Output 1
out_pin:EQ-P3B Output 2

slider1:slider_eq_bypass=1<0,1,1{Out,In}>-EQ In
//slider2:
slider3:slider_low_shelf_boost=0<0,10,0.01>-Lo Boost
slider4:slider_low_shelf_atten=0<0,10,0.01>-Lo Atten
slider5:slider_low_shelf_frequency=0<0,3,1{20 Hz,30 Hz,60 Hz,100 Hz}>-Lo CPS
//slider6:
slider7:slider_high_peak_boost=0<0,10,0.01>-Hi Boost
slider8:slider_high_peak_bandwidth=5<0,10,0.01>-Hi Bandwidth
slider9:slider_high_peak_frequency=1<0,6,1{3 kHz,4 kHz,5 kHz,8 kHz,10 kHz,12 kHz,16 kHz}>-Hi KCS Boost
//slider10:
slider11:slider_high_shelf_atten=0<0,10,0.01>-Hi Atten
slider12:slider_high_shelf_frequency=2<0,2,1{5 kHz,10 kHz,20 kHz}>-Hi KCS Atten
//slider13:
slider14:slider_eq_power=1<0,1,1{Off,On}>-Power
//slider15:
slider16:slider_gain=0<-18,18,0.01>-Gain (dB)

options:no_meter

@serialize
file_var(0,_global.mawi_eq_p3b_show_tooltip);
file_var(0,sample_accurate_automation);
file_var(0,_global.mawi_eq_p3b_auto_bypass_on_stop);

@init
gfx_loadimg(0, "./img/background.png");
gfx_loadimg(1, "./img/button_eq_in.png");
gfx_loadimg(2, "./img/knob_low_boost.png");
gfx_loadimg(3, "./img/knob_low_atten.png");
gfx_loadimg(4, "./img/knob_low_cps.png");
gfx_loadimg(5, "./img/knob_high_boost_kcs.png");
gfx_loadimg(6, "./img/knob_high_boost.png");
gfx_loadimg(7, "./img/knob_high_boost_bandwidth.png");
gfx_loadimg(8, "./img/knob_high_atten.png");
gfx_loadimg(9, "./img/knob_high_atten_kcs.png");
gfx_loadimg(10, "./img/lamp_eq_on.png");
gfx_loadimg(11, "./img/knob_eq_on.png");
gfx_loadimg(12, "./img/menu.png");

degrees = $pi/180;

function background_color_(red, green, blue)
instance()
local()
global(gfx_clear)
(
  gfx_clear = red + green*256 + blue*65536;
);

function background_img_(img_file_id, rotation)
instance(img_size_w, img_size_h)
local()
global(gfx_x, gfx_y, gfx_w, gui_scale_factor, degrees)
(
  gfx_getimgdim(img_file_id, img_size_w, img_size_h);
  gui_scale_factor = gfx_w / img_size_w;
  
  gfx_x = gfx_y = 0;
  gfx_blit(img_file_id, gui_scale_factor, rotation * degrees);
);

function resize_icon_(icon_size)
instance()
local()
global(gfx_ext_flags, gfx_w, gfx_h, gui_scale_factor)
(
  gfx_ext_flags == 0 ? (
    gfx_set(1, 1, 1, 0.5);
    //icon_size *= gui_scale_factor;
    gfx_triangle(gfx_w, gfx_h, gfx_w, gfx_h - icon_size, gfx_w - icon_size, gfx_h);
  );
);

// bandpass
function biquad_direct_(xn)
instance(a0, a1, a2, b1, b2, x_z2, x_z1, y_z2, y_z1, yn)
local()
global()
(
  yn = this..a0 * xn + this..a1 * x_z1 + this..a2 * x_z2 - this..b1 * y_z1 - this..b2 * y_z2;
  
  x_z2 = x_z1;
  x_z1 = xn;
  
  y_z2 = y_z1;
  y_z1 = yn;
  
  yn;
);

function BPF2_(frequency, Q_)
instance(K, delta, a0, a1, a2, b1, b2)
local()
global(srate)
(
  K = tan($pi * frequency / srate);
  delta = sqr(K) * Q_ + K + Q_;
   
  a0 = K / delta;
  a1 = 0;
  a2 = -K / delta;
  b1 = 2 * Q_ * (sqr(K) - 1) / delta;
  b2 = (sqr(K) * Q_ - K + Q_) / delta;
);

// lowpass
function lpf_coefficients_(slider_frequency)
instance(a)
local(omega_0, cos_omega_0)
global(srate)
(
  omega_0 = 2 * $pi * slider_frequency / srate;
  cos_omega_0 = cos(omega_0) - 2;
  a = sqrt(sqr(cos_omega_0) - 1) + cos_omega_0 + 1;
);

function lpf_processing_(input)
instance(output, a)
(
  output += this..a * (input - output);
);

// highpass
function hpf_coefficients_(slider_frequency)
instance(g, G_HP)
global(srate)
(
  g = tan($pi * slider_frequency / srate);
  G_HP = 1 / (1 + g);
);

function hpf_processing_(input)
instance(output, x_1, g, G_HP)
global()
(
  output = this..G_HP * (input - x_1);
  x_1 = x_1 + 2 * this..g * output;
  output;
);

function dB_conversion_(value)
instance(dB)
local()
global()
(
  dB = 10^(value/20);
);

function slider_parameter_linear_(index, value, default, minimum, maximum, step)
instance(slider_index, slider_value, slider_default, slider_type,
slider_minimum, slider_maximum, slider_step)
local()
global()
(
  slider_index = index;
  slider_value = value;
  slider_default = default;
  slider_minimum = minimum;
  slider_maximum = maximum;
  slider_step = step;
  slider_type = "lin";
);

function stepped_value_()
instance(slider_value, slider_step)
local()
global()
(
  slider_step === 0 ? slider_value : floor(slider_value/slider_step + 0.000001) * slider_step;
);

function slider_lin_scaled_to_normalized_()
instance(slider_value, slider_minimum, slider_maximum, slider_normalized)
local()
global()
(
  slider_value = min(max(slider_value,slider_minimum),slider_maximum);
  slider_normalized = (slider_value - slider_minimum) / (slider_maximum - slider_minimum);
  slider_normalized = min(max(slider_normalized,0),1);
);

function slider_normalized_to_lin_scaled_()
instance(slider_normalized, slider_value, slider_minimum, slider_maximum, slider_power)
local()
global()
(
  slider_normalized = min(max(slider_normalized,0),1);
  slider_value = slider_normalized * (slider_maximum - slider_minimum) + slider_minimum;
  slider_value = min(max(slider_value, slider_minimum), slider_maximum);
);

function img_frame_(file_id, scaling, rotation, pos_x, pos_y, frames)
instance(slider_value, slider_minimum, slider_maximum, img_scaling,
img_rotation, img_pos_x, img_pos_y, img_size_w, img_size_h, slider_normalized)
local(img_file_id, img_frames, img_frame, img_frame_pos_x, img_frame_pos_y)
global(gfx_x, gfx_y, gfx_a, gui_scale_factor, degrees)
(
  // image parameter
  img_file_id = file_id;
  img_scaling = scaling;
  img_rotation = rotation;
  img_pos_x = pos_x;
  img_pos_y = pos_y;
  img_frames = frames;
  gfx_getimgdim(img_file_id, img_size_w, img_size_h);
  img_size_h /= img_frames;
  
  // calculate image frame
  img_frame = floor((img_frames - 1) * slider_normalized);
  img_frame_pos_x = 0;
  img_frame_pos_y = img_size_h * img_frame;
  
  // draw image frame
  gfx_x = img_pos_x * gui_scale_factor;
  gfx_y = img_pos_y * gui_scale_factor;
  //gfx_a = 0.5;
  gfx_blit(img_file_id, img_scaling * gui_scale_factor, img_rotation * 
  degrees, img_frame_pos_x, img_frame_pos_y, img_size_w, img_size_h);
);

function mouse_button_switch_()
instance(slider_index, slider_value, slider_default, slider_normalized,
slider_minimum, slider_maximum,
mouse_over, mouse_drag, mouse_click_left, slider_value_previous)
local()
global(current_cursor, slider_change)
(
  // mouse parameter
  mouse_over || mouse_drag ? current_cursor = 32649;
  
  // process
  mouse_click_left ? slider_value = !slider_value;
  slider_normalized = slider_value;
  
  // update slider
  slider_value_previous !== slider_value ? (
    slider_change = 1;
    slider_value_previous = slider_value;
    slider_automate(slider(slider_index));
  );
  
  slider_value;
);

function mouse_knob_()
instance(slider_index, slider_value, slider_default,
slider_minimum, slider_maximum,
slider_value_previous, slider_normalized, slider_type,
mouse_over, mouse_drag, mouse_scroll, mouse_click_left,
mouse_y_previous, mouse_wheel_previous, knob_resolution)
local()
global(mouse_cap, mouse_wheel, mouse_y, slider_change, current_cursor)
(
  // mouse parameter
  knob_resolution = 1/250;
  mouse_cap&4 ? knob_resolution *= 0.1;
  mouse_click_left >= 2 ? slider_value = slider_default;
  mouse_over || mouse_drag ? current_cursor = 32645;
  
  slider_type == "lin" ? this.slider_lin_scaled_to_normalized_();
  
  // process
  mouse_drag ? slider_normalized += (mouse_y_previous - mouse_y) * knob_resolution;
  mouse_scroll ? slider_normalized -= (mouse_wheel_previous - mouse_wheel) / 1.2 * 0.1 * knob_resolution;
  
  mouse_y_previous = mouse_y;
  mouse_wheel_previous = mouse_wheel;
  
  slider_type == "lin" ? this.slider_normalized_to_lin_scaled_();
  
  // update slider
  slider_value_previous !== slider_value ? (
    slider_change = 1;
    slider_value_previous = slider_value;
    slider_automate(slider(slider_index));
  );
  
  slider_value;
);

function mouse_logic_()
instance(img_scaling, img_pos_x, img_pos_y, img_size_w, img_size_h,
mouse_over, mouse_drag, mouse_scroll, mouse_click_left, mouse_click_right,
mouse_click_left_count, mouse_click_right_count,  
mouse_click_left_time, mouse_click_right_time,
mouse_doubleclicktime, mouse_click_delta,
mouse_y_previous, mouse_wheel_previous, mouse_cap_previous)
local()
global(mouse_cap, mouse_x, mouse_y, mouse_wheel, gui_scale_factor)
(
  // mouse logic
  mouse_doubleclicktime = 0.25;
  // left mouse button
  mouse_click_left = (mouse_cap&1 && !(mouse_cap_previous&1)) ? (
    mouse_click_delta = time_precise() - mouse_click_left_time;
    mouse_click_left = 1;
    mouse_click_left_time = time_precise() - 0.001;
    mouse_click_delta < mouse_doubleclicktime ? (
      mouse_click_left_count += 1;
    ):(
      mouse_click_left_count = 1;
    );
  );
  
  // right mouse button
  mouse_click_right = (mouse_cap&2 && !(mouse_cap_previous&2)) ? (
    mouse_click_delta = time_precise() - mouse_click_right_time;
    mouse_click_right = 1;
    mouse_click_right_time = time_precise() - 0.001;
    mouse_click_delta < mouse_doubleclicktime ? (
      mouse_click_right_count += 1;
    ):(
      mouse_click_right_count = 1;
    );
  );
  mouse_cap_previous = mouse_cap;
  
  // collision / mouse over
  mouse_x >= img_pos_x * gui_scale_factor &&
  mouse_x <= img_pos_x * gui_scale_factor + 
             img_size_w * img_scaling * gui_scale_factor &&
  mouse_y >= img_pos_y * gui_scale_factor &&
  mouse_y <= img_pos_y * gui_scale_factor +
             img_size_h * img_scaling * gui_scale_factor ? (
    !mouse_cap ? mouse_over = 1;
     mouse_cap ? mouse_click_left_count >= 1;
     mouse_over && mouse_click_left && mouse_click_left_count ? mouse_drag = 1;
     mouse_wheel ? mouse_scroll = 1;
   ):(
     mouse_over = mouse_click_left_count = mouse_click_left = mouse_scroll = 0;
   );
  
  !mouse_cap ? mouse_drag = 0;
  !mouse_wheel ? mouse_scroll = 0;
);

function menu_()
instance(mouse_over, mouse_drag, mouse_click_left, mouse_cap_previous, mouse_click_right, menu, #menustr)
local()
global(gfx_x, gfx_y,  mouse_x, mouse_y, current_cursor, _global.mawi_eq_p3b_show_tooltip, sample_accurate_automation,
_global.mawi_eq_p3b_auto_bypass_on_stop)
(
  // mouse parameter
  mouse_over || mouse_drag ? current_cursor = 32649;
  
  // process
  mouse_click_left ? (
    gfx_x = mouse_x;
    gfx_y = mouse_y;
  
    sprintf(#menustr,"%sShow tooltip|%sSample accurate automation (more CPU)|%sAuto bypass on stop (save CPU)|",
            _global.mawi_eq_p3b_show_tooltip == 0 ? "!":"", 
            sample_accurate_automation == 1 ? "!":"",
            _global.mawi_eq_p3b_auto_bypass_on_stop == 1 ? "!":"");
    
    menu = gfx_showmenu(#menustr);
    menu == 1 ? _global.mawi_eq_p3b_show_tooltip = !_global.mawi_eq_p3b_show_tooltip;
    menu == 2 ? sample_accurate_automation = !sample_accurate_automation;
    menu == 3 ? _global.mawi_eq_p3b_auto_bypass_on_stop = !_global.mawi_eq_p3b_auto_bypass_on_stop;
    slider_automate(-1);
  );
);

function update_sliders_() (
  // midpoint offset
  midpoint = (8.5 - 0) / (10 - 0);
  base = ((midpoint-1) / midpoint)^2;
  
  // low shelf boost
  low_shelf_boost.slider_log_scaled = (10 - 0) * ((base^(slider_low_shelf_boost * 0.1) -1) / (base - 1)) + 0;
  low_shelf_boost_value = low_shelf_boost.slider_log_scaled * 0.1 * (15 - -48) + -48;
  low_shelf_boost_value = min(max(low_shelf_boost_value, -48), 15);
  low_shelf_boost_inv = (10 - low_shelf_boost.slider_log_scaled) + 0.5;
  low_shelf_boost_inv = min(max(low_shelf_boost_inv, 0.5), 10);
  slider_low_shelf_frequency == 0 ? low_shelf_frequency = 20;
  slider_low_shelf_frequency == 1 ? low_shelf_frequency = 30;
  slider_low_shelf_frequency == 2 ? low_shelf_frequency = 60;
  slider_low_shelf_frequency == 3 ? low_shelf_frequency = 100;
  low_shelf_boost_frequency.lpf_coefficients_(low_shelf_frequency * 2 * low_shelf_boost_inv);
  low_shelf_boost.dB_conversion_(low_shelf_boost_value);
  // low shelf atten
  low_shelf_atten.slider_log_scaled = (10 - 0) * ((base^(slider_low_shelf_atten * 0.1) -1) / (base - 1)) + 0;
  low_shelf_atten_value = low_shelf_atten.slider_log_scaled * 0.1 * (-0.9 - -48) + -48;
  low_shelf_atten_value = min(max(low_shelf_atten_value, -48), -0.9);
  low_shelf_atten_inv = (10.6 - low_shelf_atten.slider_log_scaled) + 0.5;
  low_shelf_atten_inv = min(max(low_shelf_atten_inv, 0.5), 10.6);
  low_shelf_atten_frequency.lpf_coefficients_(low_shelf_frequency * 15 * low_shelf_atten_inv);
  low_shelf_atten.dB_conversion_(low_shelf_atten_value);
  // high peak boost
  high_peak_boost.slider_log_scaled = (10 - 0) * ((base^(slider_high_peak_boost * 0.1) -1)/(base - 1)) + 0;
  high_peak_boost_value = high_peak_boost.slider_log_scaled * 0.1 * (15 - -48) + -48;
  high_peak_boost_value = min(max(high_peak_boost_value, -48), 15);
  high_peak_bandwidth = (slider_high_peak_bandwidth * 0.1 - 1.5) / (0.5 - 1.5);
  slider_high_peak_frequency == 0 ? high_peak_boost_frequency = 3000;
  slider_high_peak_frequency == 1 ? high_peak_boost_frequency = 4000;
  slider_high_peak_frequency == 2 ? high_peak_boost_frequency = 5000;
  slider_high_peak_frequency == 3 ? high_peak_boost_frequency = 8000;
  slider_high_peak_frequency == 4 ? high_peak_boost_frequency = 10000;
  slider_high_peak_frequency == 5 ? high_peak_boost_frequency = 12000;
  slider_high_peak_frequency == 6 ? high_peak_boost_frequency = 16000;
  high_peak_boost_frequency.BPF2_(high_peak_boost_frequency, 0.15 * high_peak_bandwidth * slider_high_peak_boost);
  high_peak_boost.dB_conversion_(high_peak_boost_value);
  // high shelf atten
  high_shelf_atten.slider_log_scaled = (10 - 0) * ((base^(slider_high_shelf_atten * 0.1) -1) / (base -1)) + 0;
  high_shelf_atten_value = high_shelf_atten.slider_log_scaled * 0.1 * (-0.9 - -48) + -48;
  high_shelf_atten_value = min(max(high_shelf_atten_value, -48), -0.9);
  slider_high_shelf_frequency == 0 ? high_shelf_frequency = 5000 * 0.135;
  slider_high_shelf_frequency == 1 ? high_shelf_frequency = 10000 * 0.135;
  slider_high_shelf_frequency == 2 ? high_shelf_frequency = 20000 * 0.135;
  high_shelf_atten_frequency.hpf_coefficients_(high_shelf_frequency);
  high_shelf_atten.dB_conversion_(high_shelf_atten_value);
  // output
  gain.dB_conversion_(slider_gain);
);

function slider_sample_update_(value)
instance(slider_value)
local()
global()
(
  slider_value = value;
);

function automation_block_()
instance (slider_index, slider_value, number_of_samples_into_block, slider_increment, change_sample_position,
target_slider_value)
local()
global()
(
  number_of_samples_into_block = 0;
  slider_increment = 0.0;
  change_sample_position = slider_next_chg(slider_index, target_slider_value);
  change_sample_position != -1 ?
  (
    slider_increment = (target_slider_value - slider_value) / change_sample_position;
  );
);

function automation_sample_()
instance (slider_index, slider_value, number_of_samples_into_block, change_sample_position, slider_increment, target_slider_value)
global()
(
  number_of_samples_into_block == change_sample_position ? 
  (
    change_sample_position = slider_next_chg(slider_index, target_slider_value);
    change_sample_position != number_of_samples_into_block ? 
    (
      slider_increment = (target_slider_value - slider_value) / (change_sample_position - number_of_samples_into_block);
    );
  );
  
  change_sample_position != -1 ? 
  (
    slider(slider_index) += slider_increment; 
    update_sliders_();
    number_of_samples_into_block += 1;
  );
);

function tooltip_(pos_x, pos_y, alignment, text)
instance(
mouse_over, mouse_drag, mouse_scroll, 
mouse_click_left_count, 
tooltip_time_hover, tooltip_timer, 
tooltip_time_delta, tooltip, 
tooltip_fade_alpha, slider_value)
local(
tooltip_pos_x, tooltip_pos_y, tooltip_alignment, 
tooltip_text, textbox_size_w, textbox_size_h, 
value_size_w, value_size_h, 
padding_size_w, padding_size_h,
border_size_w, border_size_h)
global(
gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a, 
gui_scale_factor, #tooltip, time_current)
(
  tooltip_pos_x = pos_x;
  tooltip_pos_y = pos_y;
  tooltip_alignment = alignment;
  tooltip_text = text;
  
  // tooltip
  mouse_over || mouse_drag || mouse_scroll ? (
    tooltip_timer += tooltip_time_delta;
    tooltip_timer >= 0.5 || mouse_drag || mouse_click_left_count ? (
      tooltip = 1;
      gfx_setfont(1, "Verdana", 30 * gui_scale_factor);
      slider_value < 1000 ? (
        sprintf(#tooltip, tooltip_text, slider_value);
      ):(
        sprintf(#tooltip, tooltip_text, slider_value/1000);
      );
      gfx_measurestr(#tooltip, value_size_w *= gui_scale_factor, value_size_h *= gui_scale_factor);
      // textbox
      tooltip_pos_x *= gui_scale_factor;
      tooltip_pos_y *= gui_scale_factor;
      padding_size_w = 20 * gui_scale_factor;
      padding_size_h = 10 * gui_scale_factor;
      border_size_w = 4 * gui_scale_factor;
      border_size_h = 4 * gui_scale_factor;
      textbox_size_w = value_size_w + padding_size_w;
      textbox_size_h = value_size_h + padding_size_h;
      // left-aligned
      tooltip_alignment == 0 ? (
        // border
        gfx_x = tooltip_pos_x - border_size_w;
        gfx_y = tooltip_pos_y - border_size_h - textbox_size_h/2;
        gfx_set(0, 0, 0, tooltip_fade_alpha - 0.6);
        gfx_rect(gfx_x, gfx_y, textbox_size_w + 2*border_size_w, textbox_size_h + 2*border_size_h);
        // box
        gfx_x = tooltip_pos_x;
        gfx_y = tooltip_pos_y - textbox_size_h/2;
        gfx_set(0.9, 0.9, 0.9, tooltip_fade_alpha);
        gfx_rect(gfx_x, gfx_y, textbox_size_w, textbox_size_h);
        // text
        gfx_x = tooltip_pos_x + padding_size_w/2;
        gfx_y = tooltip_pos_y;
        gfx_set(0.1, 0.1, 0.1, tooltip_fade_alpha);
        gfx_drawstr(#tooltip, 0+4+256, gfx_x, gfx_y);
      );
      // centered
      tooltip_alignment == 1 ? (
        // border
        gfx_x = tooltip_pos_x - border_size_w - textbox_size_w/2;
        gfx_y = tooltip_pos_y - border_size_h - textbox_size_h/2;
        gfx_set(0, 0, 0, tooltip_fade_alpha - 0.6);
        gfx_rect(gfx_x, gfx_y, textbox_size_w + 2*border_size_w, textbox_size_h + 2*border_size_h);
        // box
        gfx_x = tooltip_pos_x - textbox_size_w/2;
        gfx_y = tooltip_pos_y - textbox_size_h/2;
        gfx_set(0.9, 0.9, 0.9, tooltip_fade_alpha);
        gfx_rect(gfx_x, gfx_y, textbox_size_w, textbox_size_h);
        // text
        gfx_x = tooltip_pos_x;
        gfx_y = tooltip_pos_y;
        gfx_set(0.1, 0.1, 0.1, tooltip_fade_alpha);
        gfx_drawstr(#tooltip, 1+4+256, gfx_x, gfx_y);
      );
      // right-aligned
      tooltip_alignment == 2 ? (
        // border
        gfx_x = tooltip_pos_x - border_size_w - textbox_size_w;
        gfx_y = tooltip_pos_y - border_size_h - textbox_size_h/2;
        gfx_set(0, 0, 0, tooltip_fade_alpha - 0.6);
        gfx_rect(gfx_x, gfx_y, textbox_size_w + 2*border_size_w, textbox_size_h + 2*border_size_h);
        // box
        gfx_x = tooltip_pos_x - textbox_size_w;
        gfx_y = tooltip_pos_y - textbox_size_h/2;
        gfx_set(0.9, 0.9, 0.9, tooltip_fade_alpha);
        gfx_rect(gfx_x, gfx_y, textbox_size_w, textbox_size_h);
        // text
        gfx_x = tooltip_pos_x - padding_size_w/2;
        gfx_y = tooltip_pos_y;
        gfx_set(0.1, 0.1, 0.1, tooltip_fade_alpha);
        gfx_drawstr(#tooltip, 2+4+256, gfx_x, gfx_y);
      );
    );
  );
  
  time_current = time_precise();
  tooltip_time_delta = time_current - tooltip_time_hover;
  tooltip_time_hover = time_current;
  
  !mouse_over && !mouse_drag ? tooltip_timer = tooltip = 0;
  
  tooltip > 0 ? (
    tooltip_fade_alpha < 1 ? tooltip_fade_alpha += 0.2;
    tooltip_fade_alpha = min(tooltip_fade_alpha, 1);
  ):(
    tooltip_fade_alpha > 0 ? (
      tooltip_fade_alpha -= 0.2;
    ):(
      tooltip_fade_alpha = tooltip = 0;
    );
  );

);

// slider parameter
// bypass
eq_bypass.slider_parameter_linear_(1, slider_eq_bypass, 1, 0, 1, 1);
// low shelf
low_shelf_boost.slider_parameter_linear_(3, slider_low_shelf_boost, 0, 0, 10, 0.01);
low_shelf_atten.slider_parameter_linear_(4, slider_low_shelf_atten, 0, 0, 10, 0.01);
low_shelf_frequency.slider_parameter_linear_(5, slider_low_shelf_frequency, 0, 0, 3, 1);
// high peak
high_peak_boost.slider_parameter_linear_(7, slider_high_peak_boost, 0, 0, 10, 0.01);
high_peak_bandwidth.slider_parameter_linear_(8, slider_high_peak_bandwidth, 5, 0, 10, 0.01);
high_peak_frequency.slider_parameter_linear_(9, slider_high_peak_frequency, 1, 0, 6, 1);
// high shelf
high_shelf_atten.slider_parameter_linear_(11, slider_high_shelf_atten, 0, 0, 10, 0.01);
high_shelf_frequency.slider_parameter_linear_(12, slider_high_shelf_frequency, 2, 0, 2, 1);
// power
eq_power.slider_parameter_linear_(14, slider_eq_power, 1, 0, 1, 1);

// DC blocker
input_dc_blocker.hpf_coefficients_(5);
output_dc_blocker.hpf_coefficients_(5);

@gfx 960 184
background_color_(25, 26, 27);
background_img_(0, 0);

current_cursor = 32512;

// options
options.mouse_logic_();
options.menu_();
options.img_frame_(12, 0.05, 0, 40, 60, 1);
// bypass
eq_bypass.mouse_logic_();
eq_bypass.mouse_button_switch_();
eq_bypass.img_frame_(1, 1, 0, 145, 186, 2);
slider_eq_bypass = eq_bypass.stepped_value_();
// low shelf boost
low_shelf_boost.mouse_logic_();
low_shelf_boost.mouse_knob_();
low_shelf_boost.img_frame_(2, 1, 0, 240, 40, 151);
slider_low_shelf_boost = low_shelf_boost.stepped_value_();
// low shelf atten
low_shelf_atten.mouse_logic_();
low_shelf_atten.mouse_knob_();
low_shelf_atten.img_frame_(3, 1, 0, 458, 40, 151);
slider_low_shelf_atten = low_shelf_atten.stepped_value_();
// low shelf frequency
low_shelf_frequency.mouse_logic_();
low_shelf_frequency.mouse_knob_();
low_shelf_frequency.img_frame_(4, 1, 0, 652, 133, 4);
slider_low_shelf_frequency = low_shelf_frequency.stepped_value_();
// high peak frequency
high_peak_frequency.mouse_logic_();
high_peak_frequency.mouse_knob_();
high_peak_frequency.img_frame_(5, 1, 0, 842, 130, 7);
slider_high_peak_frequency = high_peak_frequency.stepped_value_();
// high peak boost
high_peak_boost.mouse_logic_();
high_peak_boost.mouse_knob_();
high_peak_boost.img_frame_(6, 1, 0, 1060, 40, 151);
slider_high_peak_boost = high_peak_boost.stepped_value_();
// high peak bandwidth
high_peak_bandwidth.mouse_logic_();
high_peak_bandwidth.mouse_knob_();
high_peak_bandwidth.img_frame_(7, 1, 0, 1225, 213, 151);
slider_high_peak_bandwidth = high_peak_bandwidth.stepped_value_();
// high shelf atten
high_shelf_atten.mouse_logic_();
high_shelf_atten.mouse_knob_();
high_shelf_atten.img_frame_(8, 1, 0, 1308, 40, 151);
slider_high_shelf_atten = high_shelf_atten.stepped_value_();
// high shelf frequency
high_shelf_frequency.mouse_logic_();
high_shelf_frequency.mouse_knob_();
high_shelf_frequency.img_frame_(9, 1, 0, 1494, 147, 3);
slider_high_shelf_frequency = high_shelf_frequency.stepped_value_();
// power
eq_power.mouse_logic_();
eq_power.mouse_button_switch_();
eq_power.img_frame_(10, 1, 0, 1633, 24, 2);
eq_power.img_frame_(11, 1, 0, 1656, 182, 2);
slider_eq_power = eq_power.stepped_value_();

// tooltp parameter
_global.mawi_eq_p3b_show_tooltip == 0 ? (
  // bypass
  eq_bypass.tooltip_(200, 160, 1, slider_eq_bypass ? "EQ: In" : "EQ: Out");
  // low shelf
  low_shelf_boost.tooltip_(340, 255, 1, "Boost: %.2f");
  low_shelf_atten.tooltip_(555, 255, 1, "Atten: %.2f");
  low_shelf_frequency.tooltip_(752, 75, 1, 
  slider_low_shelf_frequency == 0 ? "CPS: 20" : 
  slider_low_shelf_frequency == 1 ? "CPS: 30" : 
  slider_low_shelf_frequency == 2 ? "CPS: 60" : "CPS: 100");
  // high peak
  high_peak_boost.tooltip_(1160, 255, 1, "Boost: %.2f");
  high_peak_bandwidth.tooltip_(1290, 190, 1, "Bandwidth: %.2f");
  high_peak_frequency.tooltip_(965, 75, 1, 
  slider_high_peak_frequency == 0 ? "KCS: 3": 
  slider_high_peak_frequency == 1 ? "KCS: 4" : 
  slider_high_peak_frequency == 2 ? "KCS: 5" : 
  slider_high_peak_frequency == 3 ? "KCS: 8" : 
  slider_high_peak_frequency == 4 ? "KCS: 10" : 
  slider_high_peak_frequency == 5 ? "KCS: 12" : "KCS: 16");
  // high shelf
  high_shelf_atten.tooltip_(1410, 255, 1, "Atten: %.2f");
  high_shelf_frequency.tooltip_(1570, 95, 1, 
  slider_high_shelf_frequency == 0 ? "KCS: 5" : 
  slider_high_shelf_frequency == 1 ? "KCS: 10" : "KCS: 20");
  // power
  eq_power.tooltip_(1725, 160, 1, slider_eq_power ? "Power: On" : "Power: Off");
);

slider_change ? (
  update_sliders_();
  slider_change = 0;
);

resize_icon_(15);

gfx_setcursor(current_cursor);

@slider
// bypass
eq_bypass.slider_value = slider_eq_bypass;
// low shelf
low_shelf_boost.slider_value = slider_low_shelf_boost;
low_shelf_atten.slider_value = slider_low_shelf_atten;
low_shelf_frequency.slider_value = slider_low_shelf_frequency;
// high peak
high_peak_boost.slider_value = slider_high_peak_boost;
high_peak_bandwidth.slider_value = slider_high_peak_bandwidth;
high_peak_frequency.slider_value = slider_high_peak_frequency;
// high shelf
high_shelf_atten.slider_value = slider_high_shelf_atten;
high_shelf_frequency.slider_value = slider_high_shelf_frequency;
// power
eq_power.slider_value = slider_eq_power;

update_sliders_();

@block
sample_accurate_automation == 1 ? (
  // bypass
  eq_bypass.automation_block_();
  // low shelf
  low_shelf_boost.automation_block_();
  low_shelf_atten.automation_block_();
  low_shelf_frequency.automation_block_();
  // high peak
  high_peak_boost.automation_block_();
  high_peak_bandwidth.automation_block_();
  high_peak_frequency.automation_block_();
  // high shelf
  high_shelf_atten.automation_block_();
  high_shelf_frequency.automation_block_();
  // power
  eq_power.automation_block_();
);

@sample
play_state >= _global.mawi_eq_p3b_auto_bypass_on_stop ? (
  sample_accurate_automation == 1 ? (
    // Sample Process
    // bypass
    eq_bypass.automation_sample_();
    // low shelf
    low_shelf_boost.automation_sample_();
    low_shelf_atten.automation_sample_();
    low_shelf_frequency.automation_sample_();
    // high peak
    high_peak_boost.automation_sample_();
    high_peak_bandwidth.automation_sample_();
    high_peak_frequency.automation_sample_();
    // high shelf
    high_shelf_atten.automation_sample_();
    high_shelf_frequency.automation_sample_();
    // power
    eq_power.automation_sample_();
    
    // slider update
    // bypass
    eq_bypass.slider_sample_update_(slider_eq_bypass);
    // low shelf
    low_shelf_boost.slider_sample_update_(slider_low_shelf_boost);
    low_shelf_atten.slider_sample_update_(slider_low_shelf_atten);
    low_shelf_frequency.slider_sample_update_(slider_low_shelf_frequency);
    // high peak
    high_peak_boost.slider_sample_update_(slider_high_peak_boost);
    high_peak_bandwidth.slider_sample_update_(slider_high_peak_bandwidth);
    high_peak_frequency.slider_sample_update_(slider_high_peak_frequency);
    // high shelf
    high_shelf_atten.slider_sample_update_(slider_high_shelf_atten);
    high_shelf_frequency.slider_sample_update_(slider_high_shelf_frequency);
    // power
    eq_power.slider_sample_update_(slider_eq_power);
  );
  
  slider_eq_power == 1 ? (
    // input gain
    input_1 = input_dc_blocker.1.hpf_processing_(spl0);
    input_2 = input_dc_blocker.2.hpf_processing_(spl1);
    input_1 *= gain.dB;
    input_2 *= gain.dB;
    
    // EQ
    slider_eq_bypass == 1 ? (
      // EQ output
      eq_output_1 = input_1;
      eq_output_2 = input_2;
      // low shelf boost
      slider_low_shelf_boost != 0 ? (
        low_shelf_boost_output_1 = low_shelf_boost_frequency.1.lpf_processing_(input_1);
        low_shelf_boost_output_2 = low_shelf_boost_frequency.2.lpf_processing_(input_2);
        low_shelf_boost_output_1 *= low_shelf_boost.dB;
        low_shelf_boost_output_2 *= low_shelf_boost.dB;
        eq_output_1 += low_shelf_boost_output_1;
        eq_output_2 += low_shelf_boost_output_2;
      );
      slider_low_shelf_atten != 0 ? (
        // low shelf atten
        low_shelf_atten_output_1 = low_shelf_atten_frequency.1.lpf_processing_(input_1);
        low_shelf_atten_output_2 = low_shelf_atten_frequency.2.lpf_processing_(input_2);
        low_shelf_atten_output_1 *= low_shelf_atten.dB;
        low_shelf_atten_output_2 *= low_shelf_atten.dB;
        eq_output_1 -= low_shelf_atten_output_1;
        eq_output_2 -= low_shelf_atten_output_2;
      );
      slider_high_peak_boost != 0 ? (
        // high peak boost
        high_peak_boost_output_1 = high_peak_boost_frequency.1.biquad_direct_(input_1);
        high_peak_boost_output_2 = high_peak_boost_frequency.2.biquad_direct_(input_2);
        high_peak_boost_output_1 *= high_peak_boost.dB;
        high_peak_boost_output_2 *= high_peak_boost.dB;
        eq_output_1 += high_peak_boost_output_1;
        eq_output_2 += high_peak_boost_output_2;
      );
      // high shelf atten
      slider_high_shelf_atten != 0 ? (
        high_shelf_atten_output_1 = high_shelf_atten_frequency.1.hpf_processing_(eq_output_1);
        high_shelf_atten_output_2 = high_shelf_atten_frequency.2.hpf_processing_(eq_output_2);
        high_shelf_atten_output_1 *= high_shelf_atten.dB;
        high_shelf_atten_output_2 *= high_shelf_atten.dB;
        eq_output_1 -= high_shelf_atten_output_1;
        eq_output_2 -= high_shelf_atten_output_2;
      );
    ):(
      // bypassed EQ output
      eq_output_1 = input_1;
      eq_output_2 = input_2;
    );
    
    // harmonics
    eq_output_1 > 0 ? (
      harmonics_output_1 = eq_output_1;
      ):(
      harmonics_output_1 = eq_output_1/(1 + abs(eq_output_1));
    );
    
    eq_output_2 > 0 ? (
      harmonics_output_2 = eq_output_2;
      ):(
      harmonics_output_2 = eq_output_2/(1 + abs(eq_output_2));
    );
    
    // output
    output_1 = 0.96 * eq_output_1 + 0.04 * harmonics_output_1;
    output_2 = 0.96 * eq_output_2 + 0.04 * harmonics_output_2;
    
    spl0 = output_dc_blocker.1.hpf_processing_(output_1);
    spl1 = output_dc_blocker.2.hpf_processing_(output_2);
  );
);

